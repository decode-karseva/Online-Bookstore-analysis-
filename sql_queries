-- Create Database
CREATE DATABASE OnlineBookstore;

use OnlineBookstore;

-- Create Tables

CREATE TABLE Books (
    Book_ID SERIAL PRIMARY KEY,
    Title VARCHAR(100),
    Author VARCHAR(100),
    Genre VARCHAR(50),
    Published_Year INT,
    Price NUMERIC(10, 2),
    Stock INT
);

CREATE TABLE Customers (
    Customer_ID SERIAL PRIMARY KEY,
    Name VARCHAR(100),
    Email VARCHAR(100),
    Phone VARCHAR(15),
    City VARCHAR(50),
    Country VARCHAR(150)
);

CREATE TABLE Orders (
    Order_ID SERIAL PRIMARY KEY,
    Customer_ID INT REFERENCES Customers(Customer_ID),
    Book_ID INT REFERENCES Books(Book_ID),
    Order_Date DATE,
    Quantity INT,
    Total_Amount NUMERIC(10, 2)
);
-- import all files from data wizard 

SELECT * FROM Books;
SELECT * FROM Customers;
SELECT * FROM Orders;

--  Retrieve all books in the "Fiction" genre:
select * from books 
where genre ="Fiction";

--  Find books published after the year 1950:
select * from books 
where published_year > 1950
order by published_year asc;


-- 3) List all customers from the Canada:
select * from customers 
where country = "Canada";



-- 4) Show orders placed in November 2023:
select * from orders
where order_date between "2023-11-01" and "2023-11-30";

-- 5) Retrieve the total stock of books available:
select sum(stock) as total_books_in_stock from books;



-- 6) Find the details of the most expensive book:
select * from books 
order by price desc
limit 1;



-- 7) Show all customers who ordered more than 1 quantity of a book:
select c.name, o.quantity from customers as c
join orders as o
on c.customer_id = o.customer_id
where quantity > 1
order by c.name asc ;


-- 8) Retrieve all orders where the total amount exceeds $20:
select * from orders 
where Total_amount >20;


-- 9) List all genres available in the Books table:
select distinct genre from books;

-- 10) Find the book with the lowest stock:
select title, min(stock) as minimum_stock from books 
group by title 
order by min(stock) asc
limit 1;

-- 11) Calculate the total revenue generated from all orders:
select sum(total_amount) as total_revenue  from orders;

-- Advance Questions : 

-- 1) Retrieve the total number of books sold for each genre:

select b.genre, sum(o.quantity) as total_books_sold from books as b
join orders as o
on b.book_id = o.book_id
group by b.genre;

-- 2) Find the average price of books in the "Fantasy" genre:

select genre, avg(price) as average_price from books 
group by genre 
having genre = "fantasy";

-- 3) List customers who have placed at least 2 orders:

select o.customer_id, c.name, count(o.order_id) as order_count
from orders as o 
join customers as c
on o.customer_id = c.customer_id
group by o.customer_id,c.name 
having count(order_id) >=2;

-- 4) Find the most frequently ordered book:

select b.title, count(o.quantity) as book_ordered from books as b 
join orders as o 
on b.book_id = o.book_id
group by b.title 
order by book_ordered desc;

-- 5) Show the top 3 most expensive books of 'Fantasy' Genre :

select title,genre, max(price) as highest_price from books 
group by genre, title
having genre = "Fantasy"
order by max(price) desc 
limit 3;


-- 6) Retrieve the total quantity of books sold by each author:

select b.author, sum(o.quantity) as total_sold from books as b 
join orders as o 
on b.book_id = o.book_id
group by author;
-- 7) List the cities where customers who spent over $30 are located:

select distinct c.city, o.total_amount from customers as c 
join orders as o 
on c.customer_id = o.customer_id 
where o.total_amount > 30;


-- 8) Find the customer who spent the most on orders:

select c.Name, sum(o.total_amount) as total_spent from customers as c 
join orders as o 
on c.customer_id = o.customer_id 
group by c.Name
order by total_spent desc
limit 1;


-- 9) Calculate the stock remaining after fulfilling all orders:

SELECT 
    b.title, 
    b.stock, 
    (b.stock - SUM(o.quantity)) AS stock_remaining
FROM books AS b
JOIN orders AS o ON b.book_id = o.book_id
GROUP BY b.book_id, b.title, b.stock;


select b.book_id, b.title, b.stock, coalesce(sum(o.quantity),0) as Order_quantity,
b.stock- coalesce(sum(o.quantity),0) as remaining_quantity
from books as b 
left join orders as o 
on b.book_id = o.book_id 
group by b.book_id;
